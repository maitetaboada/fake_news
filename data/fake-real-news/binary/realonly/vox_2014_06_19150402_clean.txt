The Supreme Court has struck a blow against patents on software, unanimously invalidating a patent on computer-implemented method of financial hedging. Here are some initial thoughts: n1) The ruling is bad news for software patents nThe patent claimed a method of hedging against counter-party risk, which is a fancy word for the risk that you make a deal with someone and later he doesn't uphold his end of the bargain. The Supreme Court unanimously held that you can't patent an abstract concept like this merely by stating that the hedging should be done on a computer. This kind of abstract patent is depressingly common in the software industry, and the CLS ruling will cause lower courts to take a harder look at them. n2) The ruling is not the knockout blow that some software patent opponents were hoping for nThe court writes that "many computer-implemented claims" are eligible for patent protection. It doesn't elaborate on which claims those are, so it's a little unclear what that means, but software patent supporters will seize on that language as evidence that most software patents are still valid. n3) The ruling is plagued by a conceptual confusion that has bedeviled the courts since the outset of the software patent debate nThe Supreme Court rejects the patent because "each step does no more than require a generic computer to perform generic computer functions." But many computer programmers would point out that this describes all software. nSoftware is nothing more than a long list of conventional mathematical operations. If you think a list of conventional operations isn't patent-eligible, that implies that any "invention" you can implement by loading software on a generic computer isn't patent-eligible. The problem is that judges lose sight of this fact as software gets more complex, leading to a de facto rule that only complicated computer programs can be patented. n4) Three justices wanted to eliminate business method patents altogether nOne of the most contentious Supreme Court patent decisions of recent years was the 2010 Bilski decision, which was decided by a 5-4 vote. A 4-justice minority led by Justice John Paul Stevens, who has since retired from the court, wanted to rule that "business methods" were never patentable. The other five justices disagreed, ruling on narrower grounds that left most business methods intact. The three justices who sided with Stevens still think all business methods should be invalid, and they filed a separate concurrence saying so. n5) The ruling leaves the door open to a stricter limits on software patents in the future nFor example, in its summary of the court's first software patent case in 1972, the court wrote that the invention wasn't patentable because it could be "carried out in existing computers long in use." Of course, the same point could be made about a wide variety of modern software patents, from Amazon's "one-click shopping" patent to Apple's data detectors. Indeed, there's a computer science thesis that says that any computer program can, in principle, be implemented on any computer. So a future court wanting to eliminate software patents could cite this language to justify invalidating most patents on software. n6) The ruling is a continuation of the approach the court has taken for a decade now nSince 2005, the Supreme Court has steadily but incrementally restricted patent rights. The fact that this ruling, like many previous Supreme Court rulings, was unanimous helps to underscore the court's imperative to scale back the expansion of patent rights that occurred in the 1980s and 1990s. n7) This will not be the last time the Supreme Court rules on the patentability of software nSo far, all of its cases on patentable subject matter have been easy cases: broad vague patents that almost everyone thought should be invalidated. In these cases (including Bilski and Mayo) the outcome was a foregone conclusion but the question was whether the court would issue a broad ruling or a narrow one. But sooner or later, the Supreme Court is going to have to grapple with a hard case: a software patent where there's a genuine disagreement about whether the patent should be valid. Only then will we start to have a clear idea of which software inventions, if any, are eligible for patent protection.